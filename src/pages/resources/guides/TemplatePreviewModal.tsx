
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Download } from 'lucide-react';
import { downloadResource } from './GuideDownloadHandler';
import { ConfettiExplosion } from '@/components/ui/confetti-explosion';

interface TemplatePreviewModalProps {
  isOpen: boolean;
  onClose: () => void;
  resource: {
    id: string;
    title: string;
    description: string;
  };
  onDownloadSuccess: (resourceId: string) => void;
}

export const TemplatePreviewModal: React.FC<TemplatePreviewModalProps> = ({ 
  isOpen, 
  onClose, 
  resource,
  onDownloadSuccess
}) => {
  const [activeTab, setActiveTab] = useState<'html' | 'markdown' | 'json' | 'csv'>('html');
  const [showConfetti, setShowConfetti] = useState(false);
  
  const handleDownload = () => {
    downloadResource(resource.title, resource.description, activeTab);
    setShowConfetti(true);
    onDownloadSuccess(resource.id);
    
    setTimeout(() => {
      setShowConfetti(false);
    }, 3000);
  };

  return (
    <>
      {showConfetti && <ConfettiExplosion duration={3000} particleCount={80} />}
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>{resource.title}</DialogTitle>
            <DialogDescription>{resource.description}</DialogDescription>
          </DialogHeader>
          
          <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as any)}>
            <TabsList className="grid grid-cols-4 mb-4">
              <TabsTrigger value="html">HTML</TabsTrigger>
              <TabsTrigger value="markdown">Markdown</TabsTrigger>
              <TabsTrigger value="json">JSON</TabsTrigger>
              <TabsTrigger value="csv">CSV</TabsTrigger>
            </TabsList>
            
            <div className="border rounded-md p-4 bg-gray-50 overflow-auto max-h-[40vh]">
              <TabsContent value="html" className="prose max-w-none">
                <div className="font-mono text-sm whitespace-pre-wrap overflow-x-auto">
                  {`<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${resource.title}</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      line-height: 1.6;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    h1 {
      color: #333;
      border-bottom: 1px solid #ddd;
      padding-bottom: 10px;
    }
    /* More styles... */
  </style>
</head>
<body>
  <h1>${resource.title}</h1>
  <div class="description">${resource.description}</div>
  
  <div class="content">
    <h2>Getting Started</h2>
    <p>This is a template for your ${resource.title} document. Customize it according to your needs.</p>
    
    <!-- More content... -->
  </div>
</body>
</html>`}
                </div>
              </TabsContent>
              
              <TabsContent value="markdown" className="font-mono text-sm whitespace-pre-wrap">
                {`# ${resource.title}

_${resource.description}_

## Getting Started

This is a template for your ${resource.title} document. Customize it according to your needs.

## Main Section 1

Add your content here...

## Main Section 2

Add more content here...

---

Generated by Sheraa Resources | © ${new Date().getFullYear()} Sharjah Entrepreneurship Center`}
              </TabsContent>
              
              <TabsContent value="json" className="font-mono text-sm whitespace-pre-wrap">
                {JSON.stringify({
                  title: resource.title,
                  description: resource.description,
                  sections: [
                    {
                      title: "Getting Started",
                      content: `This is a template for your ${resource.title} document. Customize it according to your needs.`
                    },
                    {
                      title: "Main Section 1",
                      content: "Add your content here..."
                    },
                    {
                      title: "Main Section 2",
                      content: "Add more content here..."
                    }
                  ],
                  metadata: {
                    creator: "Sheraa Resources",
                    createdAt: new Date().toISOString(),
                    copyright: `© ${new Date().getFullYear()} Sharjah Entrepreneurship Center`
                  }
                }, null, 2)}
              </TabsContent>
              
              <TabsContent value="csv" className="font-mono text-sm whitespace-pre-wrap">
                {`Category,Title,Description,Priority,Status,Notes
Section 1,Item 1,Description for Item 1,High,In Progress,
Section 1,Item 2,Description for Item 2,Medium,Not Started,
Section 2,Item 3,Description for Item 3,Low,Completed,
Section 2,Item 4,Description for Item 4,High,Not Started,
,,,,,
Notes:,This is a template for ${resource.title}.,Please customize according to your needs.,,,`}
              </TabsContent>
            </div>
          </Tabs>

          <div className="mt-4 bg-sheraa-light/30 p-4 rounded-md">
            <h3 className="text-sm font-semibold mb-2">About this template:</h3>
            <p className="text-sm text-gray-600">
              This {activeTab.toUpperCase()} template provides a structured starting point for your {resource.title.toLowerCase()}. 
              After downloading, you can customize it to fit your specific needs and requirements.
            </p>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button onClick={handleDownload} className="gap-2">
              <Download className="h-4 w-4" />
              Download as {activeTab.toUpperCase()}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};
